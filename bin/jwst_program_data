#!/usr/bin/env python

from argparse import ArgumentParser

from jvlib.mast.api import JwstProgramData

# Configure argument parser.
parser = ArgumentParser(
    prog = 'jwst_program_data',
    description = 'Interface with MAST archive for specified JWST program')
parser.add_argument(
    'progid', type=int, help='JWST program ID')
parser.add_argument(
    '-cs', '--constraint-string',
    help='subset of allowed instruments, observations, and/or filetypes')
parser.add_argument(
    '-bd', '--browse-datasets', action='store_true',
    help='show in browser window datasets that satisfy constraints')
parser.add_argument(
    '-bf', '--browse_files', action='store_true',
    help='show in browser window files that satisfy constraints')
parser.add_argument(
    '-df', '--download_files', action='store_true',
    help='download files that satisfy constraints')
parser.add_argument(
    '-lf', '--list_files', action='store_true',
    help='list to terminal filenames that satisfy constraints')
parser.add_argument(
    '-si', '--summarize_instruments', action='store_true',
    help='summarize by instrument files that satisfy constraints')
parser.add_argument(
    '-so', '--summarize_observations', action='store_true',
    help='summarize by observation files that satisfy constraints')
parser.add_argument(
    '-st', '--summarize_types', action='store_true',
    help='summarize by type files that satisfy constraints')

# Parse arguments
args = parser.parse_args()

# Instantiate JwstProgramData object.
progdata = JwstProgramData(args.progid)

# Apply constraints.
if args.constraint_string:
    progdata.apply_constraint_string(args.constraint_string)

# List filenames.
if args.list_files:
    for filename in progdata.filenames:
        print(filename)

# Download files.
if args.download_files:
    progdata.download_files()

# Browse results.
if args.browse_datasets:
    progdata.browse_datasets()
if args.browse_files:
    progdata.browse_files()

# Summarize files.
if args.summarize_instruments:
    summary = progdata.summarize('inst')
    summary.show_in_browser(jsviewer=True)
if args.summarize_observations:
    summary = progdata.summarize('obs')
    summary.show_in_browser(jsviewer=True)
if args.summarize_types:
    summary = progdata.summarize('filetype')
    summary.show_in_browser(jsviewer=True)
